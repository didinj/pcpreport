/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package pcpreports;

import java.awt.Cursor;
import java.io.*;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.*;
import javax.persistence.*;
import javax.swing.JOptionPane;

/**
 *
 * @author FADHILAH
 */
public class PcpForm extends javax.swing.JFrame {

    EntityManagerFactory emf =
            Persistence.createEntityManagerFactory("PcpreportPU");

    /**
     * Creates new form PcpForm
     */
    public PcpForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        dateFrom = new com.toedter.calendar.JDateChooser();
        dateTo = new com.toedter.calendar.JDateChooser();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        reportButton = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        driveCombo = new javax.swing.JComboBox();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        logText = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("PCP Report");
        setLocationByPlatform(true);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setText("Tanggal Mulai");

        jLabel2.setText("Tanggal Akhir");

        reportButton.setText("Proses Report");
        reportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reportButtonActionPerformed(evt);
            }
        });

        jButton2.setText("Lihat Report");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(dateTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(dateFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(reportButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(dateFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel2)
                    .addComponent(dateTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jButton2)
                    .addComponent(reportButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel3.setText("Pilih Drive");

        driveCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "D:/", "E:/", "F:/", "G:/", "H:/", "I:/", "J:/" }));
        driveCombo.setSelectedIndex(2);

        jButton1.setText("Tarik Data");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3)
                        .addGap(33, 33, 33)
                        .addComponent(driveCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addComponent(jButton1)))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(driveCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addContainerGap())
        );

        logText.setColumns(20);
        logText.setRows(5);
        jScrollPane1.setViewportView(logText);

        jMenu1.setText("File");

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem2.setText("Exit");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("Data Karyawan");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem1);

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem3.setText("Data PCP");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem3);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem4.setText("Report PCP");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem4);

        jMenuItem5.setText("Hapus PCP");
        jMenuItem5.setEnabled(false);
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem5);

        jMenuItem6.setText("Hapus Report");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem6);

        jMenuItem7.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem7.setText("Data Lokasi");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem7);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28))
        );

        pack();
        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        java.awt.Dimension dialogSize = getSize();
        setLocation((screenSize.width-dialogSize.width)/2,(screenSize.height-dialogSize.height)/2);
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        EmployeeForm ef = new EmployeeForm(this, true);
        ef.setVisible(true);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        getdatafromsd();
//        saveData();
        putdatatosd();
        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        PcpDataForm pdf = new PcpDataForm(this, true);
        pdf.setVisible(true);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    @SuppressWarnings("CallToThreadDumpStack")
    private void reportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reportButtonActionPerformed
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        Date from = dateFrom.getDate();
        Date to = dateTo.getDate();
        DateFormat fmtdate = new SimpleDateFormat("dd/MM/yyyy");
        DateFormat fmttime = new SimpleDateFormat("HH:mm:ss");
        EntityManager em = emf.createEntityManager();
        Query empQuery = em.createNamedQuery("Employee.findAll");
        List<Employee> emps = empQuery.getResultList();
        GregorianCalendar gc = new GregorianCalendar();
        for (Employee emp : emps) {
            Query query1 = em.createQuery("SELECT p FROM Pcp p WHERE p.nik=:nik AND p.tgl>=:dateFrom AND p.tgl<=:dateTo ORDER BY p.tgl,p.jam");
            query1.setParameter("nik", emp.getNik());
            query1.setParameter("dateFrom", from);
            query1.setParameter("dateTo", to);
            List<Pcp> pcp = query1.getResultList();
            for (Pcp p : pcp) {
                Report rep = new Report();
                try {
                    rep.setNik(emp.getNik());
                    rep.setNama(emp.getNama());
                    rep.setRegu(emp.getRegu());
                    rep.setTgl(p.getTgl());
                    rep.setJam(p.getJam());
                    rep.setLokasi(p.getLok());
                    em.getTransaction().begin();
                    em.persist(rep);
                    em.flush();
                    em.getTransaction().commit();
                    logText.append("Report dari tgl " + fmtdate.format(from) + " sampai tgl " + fmtdate.format(to) + " telah di simpan\n");
                } catch (Exception e) {
                    em.getTransaction().rollback();
                    e.printStackTrace();
                    logText.append(e.toString());
                } finally {
                    if (em.getTransaction().isActive()) {
                        em.close();
                    }
                }
            }
        }
        em.close();
        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_reportButtonActionPerformed
    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        ReportForm report = new ReportForm(this, true, null, null, null, null);
        report.setVisible(true);
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        removePcp();
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        removeReport();
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        ReportForm report = new ReportForm(this, true, null, null, null, null);
        report.setVisible(true);
        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        LocationForm lf = new LocationForm(this, true);
        lf.setVisible(true);
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void getdatafromsd() {
        String loc, D, M, Y, h, m, s, cols;
        String line, text, waktu, NIK, tanggal, jam;
        DateFormat timeFormat = new SimpleDateFormat("MM/dd/yyyy hh:mm:ss");
        DateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");
        DateFormat jamFormat = new SimpleDateFormat("hh:mm");
        File dir = new File(driveCombo.getSelectedItem().toString().trim());
        try {
            File files[] = dir.listFiles();
            for (File f : files) {
                if (f.getName().endsWith(".txt")) {
                    if (f.getName().length() == 10) {
                        EntityManager logem = emf.createEntityManager();
                        Query logquery = logem.createQuery("SELECT i FROM Importlog i WHERE i.filename=:filename");
                        logquery.setParameter("filename", f.getName().toString().trim());
                        List logresult = logquery.getResultList();
                        if (logresult.isEmpty()) {
                            FileInputStream fis = new FileInputStream(f);
                            BufferedInputStream bis = new BufferedInputStream(fis);
                            DataInputStream dis = new DataInputStream(bis);
                            while ((line = dis.readLine()) != null) {
                                StringTokenizer stk = new StringTokenizer(line, ";");
                                while (stk.hasMoreTokens()) {
                                    cols = stk.nextToken();
                                    text = cols.replaceAll(" ", "").trim();
                                    if (text.length() == 26 && !text.isEmpty()) {
                                        loc = text.substring(0, 3);
                                        NIK = text.substring(3, 11);
                                        D = text.substring(14, 16);
                                        M = text.substring(16, 18);
                                        Y = text.substring(18, 20);
                                        h = text.substring(20, 22);
                                        m = text.substring(22, 24);
                                        s = text.substring(24, 26);
                                        waktu = "20" + Y + "/" + M + "/" + D + " " + h + ":" + m + ":" + s;
                                        jam = h + ":" + m;
                                        tanggal = M + "/" + D + "/20" + Y;
                                        Date udate = dateFormat.parse(tanggal);
                                        Date utime = timeFormat.parse(waktu);
                                        Calendar cal = Calendar.getInstance();
                                        cal.setTime(utime);
                                        cal.add(Calendar.MINUTE, 2);
                                        Date totime = cal.getTime();
                                        cal.setTime(utime);
                                        cal.add(Calendar.MINUTE, -2);
                                        Date fromtime = cal.getTime();
                                        EntityManager em = emf.createEntityManager();
                                        Query query = em.createQuery("SELECT p FROM Pcp p WHERE p.nik=:nik AND p.tgl=:tgl AND p.jam BETWEEN :jamstart AND :jamend AND p.lok=:loc");
                                        query.setParameter("nik", NIK.trim());
                                        query.setParameter("tgl", udate);
                                        query.setParameter("jamstart", fromtime);
                                        query.setParameter("jamend", totime);
                                        query.setParameter("loc", loc);
                                        List<Pcp> pcplist = query.getResultList();
                                        if (pcplist.isEmpty()) {
                                            Pcp pcp = new Pcp();
                                            try {
                                                pcp.setNik(NIK);
                                                pcp.setTgl(udate);
                                                pcp.setJam(utime);
                                                pcp.setLok(loc);
                                                em.getTransaction().begin();
                                                em.persist(pcp);
                                                em.flush();
                                                em.getTransaction().commit();
                                                logText.append(NIK + ", " + udate + ", " + utime + ", " + loc + "\n");
                                            } catch (Exception e) {
                                                em.getTransaction().rollback();
                                            } finally {
                                                if (em.getTransaction().isActive()) {
                                                    em.close();
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            Importlog il = new Importlog();
                            try {
                                il.setFilename(f.getName().toString().trim());
                                logem.getTransaction().begin();
                                logem.persist(il);
                                logem.flush();
                                logem.getTransaction().commit();
                            } catch (Exception e) {
                                logem.getTransaction().rollback();
                            } finally {
                                if (logem.getTransaction().isActive()) {
                                    logem.close();
                                }
                            }
                        }
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void saveData() {
        String loc, D, M, Y, h, m, s, cols;
        String line, text, waktu, NIK, tanggal, jam;
        File directory = new File(driveCombo.getSelectedItem().toString().trim());
        DateFormat timeFormat = new SimpleDateFormat("MM/dd/yyyy hh:mm:ss");
        DateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");
        DateFormat jamFormat = new SimpleDateFormat("hh:mm");
        try {
            File files[] = directory.listFiles();
            for (File f : files) {
                if (!f.getName().endsWith(".inf")) {
                    FileInputStream fis = new FileInputStream(f);
                    BufferedInputStream bis = new BufferedInputStream(fis);
                    DataInputStream dis = new DataInputStream(bis);
                    while ((line = dis.readLine()) != null) {
                        StringTokenizer stk = new StringTokenizer(line, ";");
                        while (stk.hasMoreTokens()) {
                            cols = stk.nextToken();
                            text = cols.replaceAll(" ", "");
                            text = text.replaceAll(" ", "").trim();
                            if (text.length() == 21) {
                                if (!text.isEmpty()) {
                                    NIK = text.substring(0, 8);
                                    loc = text.substring(20);
                                    D = text.substring(8, 10);
                                    M = text.substring(10, 12);
                                    Y = text.substring(12, 14);
                                    h = text.substring(14, 16);
                                    m = text.substring(16, 18);
                                    s = text.substring(18, 20);
                                    waktu = "20" + Y + "/" + M + "/" + D + " " + h + ":" + m + ":" + s;
                                    jam = h + ":" + m;
                                    tanggal = M + "/" + D + "/20" + Y;
                                    Date udate = dateFormat.parse(tanggal);
                                    Date utime = timeFormat.parse(waktu);
                                    EntityManager em = emf.createEntityManager();
                                    Query query = em.createQuery("SELECT p FROM Pcp p WHERE p.nik=:nik AND p.tgl=:tgl AND p.jam=:jam AND p.lok=:loc");
                                    query.setParameter("nik", NIK.trim());
                                    query.setParameter("tgl", udate);
                                    query.setParameter("jam", utime);
                                    query.setParameter("loc", loc);
                                    List<Pcp> pcplist = query.getResultList();
                                    if (pcplist.isEmpty()) {
                                        Pcp pcp = new Pcp();
                                        try {
                                            pcp.setNik(NIK);
                                            pcp.setTgl(udate);
                                            pcp.setJam(utime);
                                            pcp.setLok(loc);
                                            em.getTransaction().begin();
                                            em.persist(pcp);
                                            em.flush();
                                            em.getTransaction().commit();
                                            logText.append(NIK + ", " + udate + ", " + utime + ", " + loc + "\n");
                                        } catch (Exception e) {
                                            em.getTransaction().rollback();
                                        } finally {
                                            if (em.getTransaction().isActive()) {
                                                em.close();
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    dis.close();
                    bis.close();
                    fis.close();
                }
            }
            logText.append("Data PCP telah tersimpan.\n");
        } catch (IOException ie) {
            logText.append("Error : " + ie + "\n");
        } catch (Exception e) {
            logText.append("Error : " + e + "\n");
        }
    }

    private void putdatatosd() {
        EntityManager em = emf.createEntityManager();
        Query query = em.createQuery("SELECT e FROM Employee e");
        List<Employee> emplist = query.getResultList();
        Query query2 = em.createQuery("SELECT l FROM Location l");
        List<Location> loclist = query2.getResultList();
        File oldfile = new File(driveCombo.getSelectedItem().toString().trim(), "empfile.txt");
        if (oldfile.exists()) {
            oldfile.delete();
            File newfile = new File(driveCombo.getSelectedItem().toString().trim(), "empfile.txt");
            try {
                Writer writer = new BufferedWriter(new FileWriter(newfile));
                Iterator it = emplist.iterator();
                while (it.hasNext()) {
                    Employee emp = (Employee) it.next();
                    writer.append("" + emp.getRfid() + "" + emp.getNik() + "");
                    if (it.hasNext()) {
                        writer.append(",");
                    }
                }
                writer.append(",");
                Iterator it2 = loclist.iterator();
                while (it2.hasNext()) {
                    Location loc = (Location) it2.next();
                    writer.append("" + loc.getLoccode() + "" + loc.getLocrfid() + "");
                    if (it2.hasNext()) {
                        writer.append(",");
                    }
                }
                writer.close();
                logText.append("Data Anggota telah di update ke Memory.\n");
            } catch (IOException e) {
                logText.append("Error : " + e + "\n");
            }
        } else {
            try {
                oldfile.createNewFile();
                Writer writer = new BufferedWriter(new FileWriter(oldfile));
                Iterator it = emplist.iterator();
                while (it.hasNext()) {
                    Employee emp = (Employee) it.next();
                    writer.append("" + emp.getRfid() + "" + emp.getNik() + "");
                    if (it.hasNext()) {
                        writer.append(",");
                    }
                }
                Iterator it2 = loclist.iterator();
                writer.append(",");
                while (it2.hasNext()) {
                    Location loc = (Location) it2.next();
                    writer.append("" + loc.getLocrfid() + "" + loc.getLoccode() + "");
                    if (it2.hasNext()) {
                        writer.append(",");
                    }
                }
                writer.close();
                logText.append("Data Anggota telah di update ke Memory.\n");
            } catch (IOException e) {
                logText.append("Error : " + e + "\n");
            }
        }
    }

    public boolean removePcp() {
        EntityManager em = emf.createEntityManager();
        try {
            EntityTransaction et = em.getTransaction();
            et.begin();
            Query query = em.createQuery("DELETE FROM Pcp");
            int deleteRecord = query.executeUpdate();
            et.commit();
            JOptionPane.showMessageDialog(null, deleteRecord + " data berhasil di hapus");
        } finally {
            em.close();
            return false;
        }
    }

    public boolean removeReport() {
        EntityManager em = emf.createEntityManager();
        try {
            EntityTransaction et = em.getTransaction();
            et.begin();
            Query query = em.createQuery("DELETE FROM Report");
            int deleteRecord = query.executeUpdate();
            et.commit();
            JOptionPane.showMessageDialog(null, deleteRecord + " data berhasil di hapus");
        } finally {
            em.close();
            return false;
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;


                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PcpForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PcpForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PcpForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PcpForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new PcpForm().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser dateFrom;
    private com.toedter.calendar.JDateChooser dateTo;
    private javax.swing.JComboBox driveCombo;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea logText;
    private javax.swing.JButton reportButton;
    // End of variables declaration//GEN-END:variables
}
